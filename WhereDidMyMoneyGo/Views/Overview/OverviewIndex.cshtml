@*
    Overview page. Home page for user after login.
*@
@model OverviewViewModel

<div style="padding-top: 30px; padding-bottom: 40px;">

    <div class="container">
        <div class="row">
            <div class="col-sm-6">
                <h1 style="font-weight:bold; font-size:45px;">Welcome @Model.OverUsersModel.FirstName</h1>
                <br />

                @{
                    if (Model.OverUsersModel.Balance.Contains('-'))
                    {
                        <h3 style="color:red;">Balance: -$@Model.OverUsersModel.Balance.Substring(1)</h3>
                    }
                    else
                    {
                        <h3>Balance: $@Model.OverUsersModel.Balance</h3>
                    }
                }
            </div>
            <div class="col-sm-3">
                <div id="chartContainerType" style="width:340px; height:340px;"></div>
            </div>
        </div>
    </div>

    <br />
    <br />
    <br />

    <h5 style="font-weight:bold;">Latest Activity</h5>

    <table class="table table-bordered" cellpadding="0" cellspacing="0">
        <tr>
            <th style="width:20%">Date</th>
            <th style="width:20%">Vendor</th>
            <th style="width:20%">Category</th>
            <th style="width:20%">Type</th>
            <th style="width:20%">Amount</th>
        </tr>
        @{
            if (Model.OverTransactionsModel.TopFiveTransactions.Any())
            {
                foreach (var item in Model.OverTransactionsModel.TopFiveTransactions)
                {
                    <tr>
                        <td>@item.TransactionDate.Substring(0, 10)</td>
                        <td>@item.VendorName</td>
                        <td>@item.CategoryName</td>
                        <td>@item.TransactionType</td>
                        @if (item.TransactionType == "Expense" || item.TransactionType == "Adjustment Decrease")
                        {
                            <td>-$@item.TransactionAmount.ToString("0.00")</td>
                        }
                        else
                        {
                            <td>$@item.TransactionAmount.ToString("0.00")</td>
                        }
                    </tr>
                }
            }
        }
    </table>

    <br />
    <br />
    <br />

    @{
        var monthlyTitle = DateTime.Now.ToString("MMMM") + $" {DateTime.Now.Year} Daily Totals";
        <h5 style="font-weight:bold;">@monthlyTitle</h5>
    }

    <div id="chartContainerMonthly" style="height:350px; width:100%;"></div>

    <br />
    <br />
    <br />

    @{
        var yearlyTitle = $"{DateTime.Now.Year} Monthly Totals";
        <h5 style="font-weight:bold;">@yearlyTitle</h5>
    }

    <div id="chartContainerYearly" style="height:350px; width:100%;"></div>

    <br />
    <br />
    <br />

    <h5 style="font-weight:bold;">Vendor Totals</h5>

    <div id="chartContainerVendor" style="height:350px; width:100%;"></div>

    <br />
    <br />
    <br />

    <h5 style="font-weight:bold;">Category Totals</h5>

    <div id="chartContainerCategory" style="height:350px; width:100%;"></div>
</div>


<script type="text/javascript">
    window.onload = function () {
        CanvasJS.addColorSet("grayShades",
        [//colorSet Array

            "#404040",
            "#707070",
            "#A8A8A8",
            "#D0D0D0"
        ]);
        var chartType = new CanvasJS.Chart("chartContainerType", {
            colorSet: "grayShades",
            //theme: "light2",
            /*animationEnabled: true,
            title: {
                text: "Simple Column Chart in ASP.NET MVC"
            },
            subtitles: [
                { text: "Try Resizing the Browser" }
            ],*/
            legend: {
                maxWidth: 200,
                itemWidth: 80
            },
            data: [
                {
                    type: "pie",
                    showInLegend: true,
                    legendText: "{x}",
                    dataPoints: @Html.Raw(ViewBag.DataPointsTransType),
                }
            ]
        });
        chartType.render();

        var chartMonth = new CanvasJS.Chart("chartContainerMonthly", {
            axisX: {
                interval: 1,
                title: "Date",
                titleFontWeight: "bold",
            },
            axisY: {
                title: "Activity Total",
                titleFontWeight: "bold",
                labelFormatter: function (e) {
                    if (String(e.value).includes("-")) {
                        return "-$" + String(e.value).substring(1);
                    }
                    return "$" + e.value;
                },
            },
            data: [
                {
                    type: "column",
                    color: "#707070",
                    dataPoints: @Html.Raw(ViewBag.DataPointsMonthDay),
                }
            ]
        });
        chartMonth.render();

        var chartYear = new CanvasJS.Chart("chartContainerYearly", {
            axisX: {
                interval: 1,
                title: "Month",
                titleFontWeight: "bold",
            },
            axisY: {
                title: "Activity Total",
                titleFontWeight: "bold",
                labelFormatter: function (e) {
                    if (String(e.value).includes("-")) {
                        return "-$" + String(e.value).substring(1);
                    }
                    return "$" + e.value;
                },
            },
            data: [
                {
                    type: "column",
                    color: "#707070",
                    dataPoints: @Html.Raw(ViewBag.DataPointsYearMonth),
                }
            ]
        });
        chartYear.render();

        var chartVendor = new CanvasJS.Chart("chartContainerVendor", {
            axisX: {
                title: "Vendor",
                titleFontWeight: "bold",
            },
            axisY: {
                title: "Activity Total",
                titleFontWeight: "bold",
                labelFormatter: function (e) {
                    if (String(e.value).includes("-")) {
                        return "-$" + String(e.value).substring(1);
                    }
                    return "$" + e.value;
                },
            },
            data: [
                {
                    type: "bar",
                    color: "#707070",
                    dataPoints: @Html.Raw(ViewBag.DataPointsVendorActivity),
                }
            ]
        });
        chartVendor.render();

        var chartCategory = new CanvasJS.Chart("chartContainerCategory", {
            axisX: {
                title: "Category",
                titleFontWeight: "bold",
            },
            axisY: {
                title: "Activity Total",
                titleFontWeight: "bold",
                labelFormatter: function (e) {
                    if (String(e.value).includes("-")) {
                        return "-$" + String(e.value).substring(1);
                    }
                    return "$" + e.value;
                },
            },
            data: [
                {
                    type: "bar",
                    color: "#707070",
                    dataPoints: @Html.Raw(ViewBag.DataPointsCategoryActivity),
                }
            ]
        });
        chartCategory.render();

    };
</script>
